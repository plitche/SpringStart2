	4.객체지향 설계와 스프링 - 좋은 객체 지향 설계의 5가지 원칙(SOLID)
		: 클린코드로 유명한 로버트 마틴이 좋은 객체 지향 설계의 5가지 원칙을 정리
		
		1) SRP: 단일 책임 원칙(single responsibility principle)
		2) OCP: 개방-폐쇄 원칙(Open/closed principle)
		3) LSP: 리스코프 치환 원칙(Liskov substitution principle)
		4) ISP: 인터페이스 분리 원칙(Interface segregation principle)
		5) DIP: 의존관계 역전 원칙(Dependency inversion principle)
		
		
		1) SRP: 단일 책임 원칙
			- 한 클래스는 하나의 책임만 가져야 한다.
			- 하나의 책임이라는 것은 모호하다.
				> 중요한 기준은 변경이다. 변경이 있을 때 파급 효과가 적으면 단일 책임 원칙을 잘 따른 것
				
		2) OCP: 개방-폐쇄 원칙(Open/closed principle) **
			- 소프트웨어 요소는 확장에는 열려 있으나 변경에는 닫혀 있어야 한다.
			- 확장을 하려면, 당연히 기존 코드를 변경!!? -> 다형성을 활용
			- 인터페이스를 구현한 새로운 클래스를 하나 만들어 새로운 기능을 구현
			
		3) LSP: 리스코프 치환 원칙(Liskov substitution principle)
			- 프로그램의 객체는 프로그램의 정확성을 깨뜨리지 않으면서 하위 타입의 인스턴스로 바꿀 수 있어야 한다.
			- 다형성에서 하위 클래스를 인터페이스 규약을 다 지켜야 한다는 것, 다형성을 지원하기 위한 원칙,
			  인터페이스를 구현한 구현체는 믿고 사용하려면 이 원칙이 필요하다.
		
		4) ISP: 인터페이스 분리 원칙(Interface segregation principle)
			- 특정 클라이언트를 위한 인터페이스 여러개가 범용 인터페이스 하나보다 낫다.
				(자동차 인터페이스 -> 운전 인터페이스, 정비 인터페이스로 분리)
				(사용자 클라이언트 -> 운전자 클라이언트, 정비사 클라이언트로 분리)
			- 분리하면 정비 인터페이스 자체가 변해도 운전자 클라이언트에 영향을 주지 않음
			- 인터페이스가 명확해지고, 대체 가능성이 높아진다.
		
		5) DIP: 의존관계 역전 원칙(Dependency inversion principle)
			- 프로그래머는 "추상화에 의존해야지, 구체화에 의존하면 안된다." 의존성 주입은 이 원칙을 따르는 방법 중 하나
			- 쉽게 이야기해서 구현 클래스에 의존하지 말고, 인터페이스에 의존하라는 뜻
			- 앞에서 이야기한 역할(Role)에 의존하게 해야 한다는 것과 같다.
				
				
		* 다형성 만으로는 OCP, DIP를 지킬 수가 없다. 그럼??
			
				
				
				
				
				
				
				
				
				
				
				
				
	20.스프링 핵심 원리 이해2 - 객체 지향 원리 적용 - IoC, DI, 그리고 컨테이너
		1. 제어의 역전(IoC: Inversion of Control)
			- 기존 프로그램은 클라이언트 구현 객체가 스스로 필요한 서버 구현 객체를 생성하고, 연결하고 실행했다.
			- 반면에 AppConfig가 등장한 이후 객체는 자신의 로직을 실행하는 역할만 담당한다.
			- 프로그램에 대한 제어 흐름에 대한 권한은 모두 AppConfig가 가지고 있다.
			- 이렇듯 프로그램의 제어 흐름을 직접 제어하는 것이 아니라 외부에서 관리하는 것을 제어의 역전이라 한다.
			
		2. 프레임워크 vs 라이브러리
			- 프레임워크: 내가 작성한 코드를 제어하고, 대신 실행하면 그것은 프레임워크(JUnit)
			- 라이브러리: 내가 작성한 코드가 직접 제어의 흐름을 담당한다면 그것은 라이브러리
		
		3. 의존관계 주입 DI(Dependency Injection)
			- 의존관계는 정적인 클래스 의존 관계와, 실행 시점에 결정되는 동적인 객체(인스턴스) 의존 관계들을 분리해서 생각해야 한다.
			
			* 정적인 클래스 의존 관계
				-> 클래스가 사용하는 import 코드만 보고 의존관계를 쉽게 판단할 수 있다. 정적인 의존관계는 애플리케이션을 실행하지 않아도 분석할 수 있다.
				
			* 동적인 객체 인스턴스 의존 관계
				-> 애플리케이션 실행 시점에 실제 생성된 객체 인스턴스의 참조가 연결된 의존 관계다.
					=> 애플리케이션 실행 시점(런타임)에 외부에서 실제 구현 객체를 생성하고 클라이언트에 전달해서 클라이언트와 서버의 실제 의존관계가 연결 되는 것을 의존관계 주입이라 한다.
					=> 객체 인스턴스를 생성하고, 그 참조값을 전달해서 연결된다.
					=> 의존관계 주입을 사용하면 클라이언트 코드를 변경하지 않고, 클라이언트가 호출하는 대상의 타입 인스턴스를 변경할 수 있다.
					=> 의존관계 주입을 사용하면 정적인 클래스 의존관계를 변경하지 않고, 동적인 객체 인스턴스 의존관계를 쉽게 변경할 수 있다.
					
		4. IoC 컨테이너, DI 컨테이너
			- AppConfig처럼 객체를 생성하고 관리하면서 의존관계를 연결해 주는 것이다.
			- 의존관계 주입에 초점을 맞추어 최근에는 주로 DI컨테이너라 한다.
			- 또는 어샘블러, 오브젝트 팩토리 등으로 불린다.
			
		
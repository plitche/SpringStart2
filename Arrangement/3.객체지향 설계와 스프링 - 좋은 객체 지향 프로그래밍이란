	3.객체지향 설계와 스프링 - 좋은 객체 지향 프로그래밍이란?
		- 추상화
		- 캡슐화
		- 상속
		- 다형성(Polymorphism)
		
		* 유연하고 변경이 용이?
			- 레고 블럭 조립하듯이, 키보드/마우스 갈아 끼우듯이
			- 컴포넌트를 쉽고 유연하게 변경하면서 개발할 수 있는 방법
			
		* 다형성의 실세계 비유
			운전자 역할 ->  자동차 역할 -> 자동차 구현(K3/아반떼/테슬라 모델3)
				: 자동차가 바뀌어도 운전자 역할에 변경이 없다.
				: 운전자는 자동차의 인터페이스(역할)에 대해서만 의존하고 있다.
				: 클라이언트(운전자)는 자동차의 자동차의 내부 동작 원리까지 알 필요가 없다! -> 분리하는 이유
				
			- 역할과 구현으로 구분하면 세상이 단순해지고, 유연해지며 변경도 편리해진다.
				1. 클라이언트는 대상의 역할(인터페이스)만 알면 된다.
				2. 클라이언트는 구현 대상의 내부 구조를 몰라도 된다.
				3. 클라이언트는 구현 대상의 내부 구조가 변경되어도 영향을 받지 않는다.
				4. 클라이언트는 구현 대상 자체를 변경해도 영향을 받지 않는다.
				
			- 자바 언어의 다형성을 활용
				역할: 인터페이스
				구현: 인터페이스를 구현한 클래스, 구현 객체
				
		* 혼자있는 객체는 없다. (클라이언트: 요청, 서버: 응답)